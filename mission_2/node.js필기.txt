node.js공부 

--------------
(1)파일 경로 이동하기 
cmd에서
cd 원하는 파일 경로 

node main.js로 main.js을 실행하고
주소창에 localhost:3000을 입력하면
해당 페이지로 이동한다. 

이때 cmd창에서 Ctrl+C를 누르고 다시 시도하면 페이지가 불러와 지지 않음

즉 지금 진행한 코드는 서버로서 작동하고 있는 거임 

이때 respnose사이에 console.log(__dirname + url);
코드를 통해 현재 주소?잘 모르겠는데 그걸 표기하게 하고
페이지 내에서값을 주면 nodejs가 그 경로에 
해당되는 파일을 읽어서 그 값을 가져오는 거임 

-node.js를 껐다가 다시 들어와야 소스코드가 반영됨!

-node.js는 response.end();안에 어떤것을 넣느냐에 따라 사용자에게 전달하는 정보가 바뀐다. 

-프로그래밍적으로 사용자에게 전달한 정보를 생성한다. 

------------------------------------------------

(2)JS문법 -number.String

-Data를 어떻게 처리할 것인가?

-어떠한 DATA가 있는가 각ㄱ각의 데이터는 어떻게 처리하는가 js등 다른 것들을 클릭하면 해당되는 내용을 cmd에 표기함 
명령어에 그 



노마드 코더 - 챌린지 
----------------------------------------------------
JS-제어문

실행할 때 syntax/program1.js로 파일 위치 정확히 해주기

중복되는 부분을 제어문을 통해서 효율적으로 흐름을 제어할 거임 (조건문 등을 통해서)  

최소한의 도구를 이용해서 나의 문제를 해결하면됨 굳이 엄청 어려운거 안해도 괜찮아! 

-----------------
node js. 콘솔에서의 입력값

저장하고 cmd 돌려야함 !!!


프ꃠ그램은 입력에 대하여 정보를 처리한 후 결과를 출력하는 기계라고 할 수 있음
입력 :parameter(입력되는 정보의 형식), Argument(형식에 따라 입력한 값)  

url을 통해서 입력값 주고 받는 거 했었징?

args안에 저런 값들이 들어간다. 그 중에 첫번째 자리에는 nodejs의 런타임이 어디에 위치하고 있는지
두번째자리에는 실행시킨 파일의 경로, 세번째 자리에 입력값을 주게 된다. 

뒤에 들어오는 입력값들을 3번째 인덱스부터(2번째 자리) 값을 넣는다. 

var args = process.argv;
여기서 args는 배열이 된다. 

이때 ===해준다. (==아님) 여기서 ===와 ==의 차이는 ===이 좀 더 엄격한 equal operator인데 ===해주는게 좋다.ㅇ 

------------------
App 제작 - Not found 구현 
사용자가 query string 없는 데로 들어오게 되면 welcome page, 아이디 값이 있는 주소로 들어오면 그에 해당하는 웹페이지를 보여주는데
그 외의 주소로 들어 왔을 때 ( 존재하지 않는 ) not found(오류메세지)를 전송해보겠당
url.parse(_url, true) >> url정보를 분석해서 알려줌 이때 _url = request.url
wirtehead(200) : 기계와 기계가 통신하기 위한 간결한 방식 파일을 성공적으로 전송했다. 
파일을 찾을 수 없는 경우에는 404 
response.end('not found')로 낫파운드 띄워주기
뒤에 잘못된 주소를 붙여서 입력하면 낫파운드가 뜬당!
------------------------
홈페이지 구현

홈을 갔더니 undefined라고 되어 있음! 각각의 페이지는 잘동작함! 왜냐하면 아직 홈에 대한 처리가 잘 되어있지 않기때문
pathname은 /로 고정되어있지만 홈과 그 외를 구분하지 못한다. 이를 구분하기 위하여 querydata.id로 구분해보자
home일때는 qyerydata.id는 언디파인드, 그 외 html, css등일때는 더 있을 것이다. 
queryData.id === undefined이라면
홈이니까 title = welcome , descrition = '~~~~~'

--------------------
node.js _파일목록 알아내기 

현재상태로는 list의 추가삭제가 너무  빈번하게 일어남
이를 바꾸기 위해 
이 데이터 디렉토일의 파일이 추가삭제 수정되었을때 그거 node.js를 통해 알아낼 수 있을까

fs.readdir

var testFolder ='./data';
var fs=require('fs');
fs.readdir(testFolder,function(error, filelist)){
  console.log(filelist);
}

실행하는 기준에서의 디렉토리 넣어주기

파일리스트 위의 값은 e렉토리에 있는 파일의 목록을 배열로 만들어서 이런형식으로 전달하는약속을 가지고 있다.

--------------------------------
node.js_nodejs에서 동기와 비동기
(1)동기비동기1

synchronous&asynchronous

동기 : 일이 끝난다음> 다음일 > 다음일
비동기 : 어떤일이 끝날때까지 쳐다보고있는게 아니라 일이 끝나면 나한테 얘기해 하고 나는 다른일(다음일)을 처리
여러 일을 동시에 해서 효율성을 높이는거지 

node.js는 비동기적처리에 좋다.>>효율적이지만 복잡하다 

node.js의 여러 함수들을 보면 
sync가 있는 애들이 있고 (동기적)
sync가 없고 인자에 callback이 있는애들이 있디/(비동기적)

var result=fs.readFileSync('syntax/sample.txt','utf8');(동기적)
A>B>C


node.js는 sync가 없는 애들을 선호한다.
세번째 인자로 function(err, result)이런식으로 넣어준다.
readFileSync는 리턴값을 주지만 readFile은 return값을 제공하지 않기때문에 var result = fs.readFile이런식으로 하면안된다.

대신 함수를 세번재 인자로 제공하면서
파일을 읽는 작업이 끝나면 세번째 인자로 준 저 함수를 실행시키며서 첫번째 인자에는 에러가 있다면 에러를 제공하고
두번째 파라미터에는 파일의 내용을 인자로서 제공한다. 
따라서 이런식으로 작성해준다. 
fs.readFile('syntax/sample.txt', 'utf8', function(err, result){
    console.log(result);
A>C>B
(3)callback
변수의 값으로 함수를 할당할 수 있다. 즉js에서는 함수가 값이다. 

이 기능의 실행이 끝난다음에 이 함수의 실행이 끝났으니까 다음일을 하세요하고싶으면
인자로 콜백을 받고
콜백을 수행
showfunc()를 실행하면서
showfunc(a);를 넣고 오랜시간이 걸리는 함수를 실행을하고
callbcak이라는 그 함수를 showfunc는 인자로 갖게되겠지
그리고 show를 실행하겠지 .