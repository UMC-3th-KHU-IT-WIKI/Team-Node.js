{"ast":null,"code":"var _jsxFileName = \"/Users/yoonji_kim/mbti_react/src/Test.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Data } from './Data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Test() {\n  _s();\n\n  const [idx, setIdx] = useState(0); //문제질문 idx 넘겨주는 용도\n\n  const [score, setScore] = useState(0); //score를 설정해주는 용도\n\n  const endPoint = 3; //질문의 갯수\n\n  const navigate = useNavigate();\n\n  const Button = (_ref, _ref2) => {\n    let {\n      answer\n    } = _ref;\n    let {\n      score\n    } = _ref2;\n\n    //버튼을 클릭했을때 실행되는 함수\n    const goNext = () => {\n      console.log(idx);\n\n      if (endPoint !== idx + 1) {\n        setIdx(idx + 1);\n      } else {\n        //결과 페이지 이동\n        navigate(\"/result\");\n      }\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: goNext,\n      children: answer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this);\n  };\n  /*function goNext(score) {\n      console.log(idx);\n      if(endPoint !== idx + 1){\n          setIdx(idx+1);\n      }\n      else{ //결과 페이지 이동\n          navigate(\"/result\");\n      }\n  }*/\n  //goNext에서 결과값을 반환하면\n  //dictionary는 key,value의 pair로 저장하여, 리스트에서 인덱스로 접근하는 거와 다르게 key의 값으로 접근하여, 원하는 값을 찾을때 빠르게 찾을 수 있다는 장점\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: Data[idx].q\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      answer: Data[idx].a[0].answer,\n      score: Data[idx].a[0].type\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      answer: Data[idx].a[1].answer,\n      score: Data[idx].a[1].type\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 7\n  }, this); //처음에는 0번째 질문이 나오고\n  //button을 누르면 다음 질문으로 넘어가야함\n  //setQna함수는 qna를 다음 질문으로 만드는 역할\n  //마지막질문을 눌렀을때 result페이지로 넘어가야함\n  //11개의 질문이 있을때,idx는10인것이 마지막\n}\n\n_s(Test, \"32Q3Yv5YsYhZRMPrxyOFvXFsF/g=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Test;\nexport default Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["React","useState","useNavigate","Data","Test","idx","setIdx","score","setScore","endPoint","navigate","Button","answer","goNext","console","log","q","a","type"],"sources":["/Users/yoonji_kim/mbti_react/src/Test.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Data } from './Data';\n\nfunction Test() {\n    \n  const [idx,setIdx] = useState(0); //문제질문 idx 넘겨주는 용도\n  const [score,setScore] = useState(0); //score를 설정해주는 용도\n\n  const endPoint = 3; //질문의 갯수\n  const navigate = useNavigate();\n\n  const Button = ({answer},{score}) => {\n    //버튼을 클릭했을때 실행되는 함수\n\n    const goNext = () => {\n        console.log(idx);\n        if(endPoint !== idx + 1){\n          setIdx(idx+1);\n      }\n      else{ //결과 페이지 이동\n          navigate(\"/result\");\n      }\n    }\n    return(\n      <button onClick={goNext}>{answer}</button>\n    );\n  }\n\n  /*function goNext(score) {\n      console.log(idx);\n      if(endPoint !== idx + 1){\n          setIdx(idx+1);\n      }\n      else{ //결과 페이지 이동\n          navigate(\"/result\");\n      }\n  }*/\n  //goNext에서 결과값을 반환하면\n  \n  //dictionary는 key,value의 pair로 저장하여, 리스트에서 인덱스로 접근하는 거와 다르게 key의 값으로 접근하여, 원하는 값을 찾을때 빠르게 찾을 수 있다는 장점\n  return( \n      <div>\n          <p>{Data[idx].q}</p>\n          <Button answer={Data[idx].a[0].answer} score={Data[idx].a[0].type} />\n          <Button answer={Data[idx].a[1].answer} score={Data[idx].a[1].type} />\n          {/*<button onClick={() => goNext(score = Data[idx].a[0].type)}>\n              {Data[idx].a[0].answer}\n          </button>\n          <button onClick={() => goNext(Data[idx].a[1].type)}>\n              {Data[idx].a[1].answer}\n  </button>*/}\n      </div>\n  );\n  //처음에는 0번째 질문이 나오고\n  //button을 누르면 다음 질문으로 넘어가야함\n  //setQna함수는 qna를 다음 질문으로 만드는 역할\n  //마지막질문을 눌렀을때 result페이지로 넘어가야함\n  //11개의 질문이 있을때,idx는10인것이 마지막\n}\n\nexport default Test"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,IAAT,QAAqB,QAArB;;;AAEA,SAASC,IAAT,GAAgB;EAAA;;EAEd,MAAM,CAACC,GAAD,EAAKC,MAAL,IAAeL,QAAQ,CAAC,CAAD,CAA7B,CAFc,CAEoB;;EAClC,MAAM,CAACM,KAAD,EAAOC,QAAP,IAAmBP,QAAQ,CAAC,CAAD,CAAjC,CAHc,CAGwB;;EAEtC,MAAMQ,QAAQ,GAAG,CAAjB,CALc,CAKM;;EACpB,MAAMC,QAAQ,GAAGR,WAAW,EAA5B;;EAEA,MAAMS,MAAM,GAAG,iBAAsB;IAAA,IAArB;MAACC;IAAD,CAAqB;IAAA,IAAZ;MAACL;IAAD,CAAY;;IACnC;IAEA,MAAMM,MAAM,GAAG,MAAM;MACjBC,OAAO,CAACC,GAAR,CAAYV,GAAZ;;MACA,IAAGI,QAAQ,KAAKJ,GAAG,GAAG,CAAtB,EAAwB;QACtBC,MAAM,CAACD,GAAG,GAAC,CAAL,CAAN;MACH,CAFC,MAGE;QAAE;QACFK,QAAQ,CAAC,SAAD,CAAR;MACH;IACF,CARD;;IASA,oBACE;MAAQ,OAAO,EAAEG,MAAjB;MAAA,UAA0BD;IAA1B;MAAA;MAAA;MAAA;IAAA,QADF;EAGD,CAfD;EAiBA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EAEA;;;EACA,oBACI;IAAA,wBACI;MAAA,UAAIT,IAAI,CAACE,GAAD,CAAJ,CAAUW;IAAd;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI,QAAC,MAAD;MAAQ,MAAM,EAAEb,IAAI,CAACE,GAAD,CAAJ,CAAUY,CAAV,CAAY,CAAZ,EAAeL,MAA/B;MAAuC,KAAK,EAAET,IAAI,CAACE,GAAD,CAAJ,CAAUY,CAAV,CAAY,CAAZ,EAAeC;IAA7D;MAAA;MAAA;MAAA;IAAA,QAFJ,eAGI,QAAC,MAAD;MAAQ,MAAM,EAAEf,IAAI,CAACE,GAAD,CAAJ,CAAUY,CAAV,CAAY,CAAZ,EAAeL,MAA/B;MAAuC,KAAK,EAAET,IAAI,CAACE,GAAD,CAAJ,CAAUY,CAAV,CAAY,CAAZ,EAAeC;IAA7D;MAAA;MAAA;MAAA;IAAA,QAHJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ,CArCc,CAkDd;EACA;EACA;EACA;EACA;AACD;;GAvDQd,I;UAMUF,W;;;KANVE,I;AAyDT,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}